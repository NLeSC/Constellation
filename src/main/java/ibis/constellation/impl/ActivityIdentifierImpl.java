/*
 * Copyright 2018 Netherlands eScience Center
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ibis.constellation.impl;

import java.io.Serializable;

import ibis.constellation.Activity;
import ibis.constellation.ActivityIdentifier;

/**
 * An <code>ActivityIdentifierImpl</code> uniquely identifies an {@link Activity} instance.
 *
 * @version 1.0
 * @since 1.0
 */
public final class ActivityIdentifierImpl implements ActivityIdentifier, Serializable {

    /* Generated */
    private static final long serialVersionUID = 4785081436543353644L;

    // The globally unique UUID for this activity is "CID:AID"
    // "CID" is the id of the Constellation on which this Activity was
    // created,
    // "AID" is the sequence number of this activity on that executor.
    private ConstellationIdentifierImpl CID;
    private long AID;
    private boolean expectsEvents;

    public static ActivityIdentifierImpl createActivityIdentifier(ConstellationIdentifierImpl cid, long aid,
            boolean expectsEvents) {
        ActivityIdentifierImpl id = new ActivityIdentifierImpl();
        id.CID = cid;
        id.AID = aid;
        id.expectsEvents = expectsEvents;
        return id;
    }

    /**
     * Returns <code>true</code> if this activity expects events, <code>false</code> otherwise.
     *
     * @return whether this activity expects events.
     */
    public boolean expectsEvents() {
        return expectsEvents;
    }

    /**
     * Returns the constellation identifier that created this activity.
     *
     * @return the constellation identifier.
     */
    public ConstellationIdentifierImpl getOrigin() {
        return CID;
    }

    /**
     * Checks if this activity identifier is actually generated by a constellation. If not, it throws an
     * {@link IllegalArgumentException}.
     *
     * @throws IllegalArgumentException
     *             is thrown when this activity identifier is not generated by constellation.
     */
    public final void checkActivityIdentifier() {
        if (CID == null) {
            throw new IllegalArgumentException("Illegal activity identifier");
        }
    }

    @Override
    public int hashCode() {
        final int PRIME = 31;
        int result = CID.hashCode();
        result = PRIME * result + (int) (AID ^ (AID >>> 32));
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final ActivityIdentifierImpl other = (ActivityIdentifierImpl) obj;

        return (CID.equals(other.CID) && AID == other.AID);
    }

    @Override
    public String toString() {
        if (CID == null) {
            return "AID:-1";
        }
        return "AID:" + Integer.toHexString(CID.getNodeId()) + ":" + Integer.toHexString(CID.getLocalId()) + ":"
                + Long.toHexString(AID);
    }
}
