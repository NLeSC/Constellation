<project name="Constellation" default="build" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">

	<property name="version" value="2.0.0-SNAPSHOT" />
	<property name="jar" value="constellation-${version}.jar" />
	<property name="zip" value="constellation-${version}.zip" />
	<property name="src-zip" value="constellation-${version}-src.zip" />

	<property name="distdir" value="./lib" />
	<property name="builddir" value="./build" />
	<property name="javadoc" value="javadoc" />

  	<property name="main.build.dir" value="${builddir}/main"/>
  	<property name="main.src.dir" value="./src/main/java"/>

  	<property name="unittest.build.dir" value="${builddir}/test"/>
  	<property name="unittest.src.dir" value="./src/test/java"/>
  	<property name="unittest.resources.dir" value="./src/test/resources"/>

  	<property name="integrationtest.build.dir" value="${builddir}/integrationTest"/>
  	<property name="integrationtest.src.dir" value="./src/integrationTests/java"/>

        <property name="result.dir" location="./target" />
        <property name="result.classes.dir" location="${result.dir}/classes" />
        <property name="result.report.dir" location="${result.dir}/site/jacoco" />
        <property name="result.exec.file" location="${result.dir}/jacoco.exec" />

	<path id="default.classpath">
		<fileset dir="external">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="test.classpath">
		<fileset dir="external">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
<!--
	<path id="test.classpath">
		<fileset dir="external">
			<include name="**/*.jar" />
		<fileset dir="lib">
		</fileset>
			<include name="**/*.jar" />
		</fileset>
	</path>
-->
        <!-- Step 1: Import JaCoCo Ant tasks -->
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
                <classpath path="./external/test/jacoco/lib/jacocoant.jar" />
        </taskdef>
        
	<!-- Compile constellation -->
	<target name="compile" depends="clean">
		<mkdir dir="${distdir}" />
		<mkdir dir="${main.build.dir}" />

		<javac destdir="${main.build.dir}" srcdir="${main.src.dir}" source="1.7" target="1.7" debug="true" 
                                        includeantruntime="false" includes="**/*.java" classpathref="default.classpath" />

		<jar jarfile="${distdir}/${jar}" basedir="${main.build.dir}" includes="**">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
		</jar>
	</target>

	<target name="unittest-compile" depends="compile">
		<mkdir dir="${unittest.build.dir}" />
		<mkdir dir="${result.classes.dir}" />
		<mkdir dir="${result.report.dir}" />

	        <copy todir="${unittest.build.dir}">
		        <file file="${unittest.resources.dir}/log4j.properties"/>
		</copy>

		<javac destdir="${unittest.build.dir}" srcdir="${unittest.src.dir}" source="1.7" target="1.7" debug="true" includeantruntime="false" includes="**/*.java">
        		<classpath>
          			<pathelement location="${distdir}/${jar}"/>
                                <path refid="test.classpath"/>
        		</classpath>
		</javac>
	</target>

	<target name="integrationtest-compile" depends="compile">
		<mkdir dir="${integrationtest.build.dir}" />
		<mkdir dir="${result.classes.dir}" />
		<mkdir dir="${result.report.dir}" />

	        <copy todir="${integrationtest.build.dir}">
		        <file file="log4j.properties"/>
		</copy>

		<javac destdir="${integrationtest.build.dir}" srcdir="${integrationtest.src.dir}" source="1.7" target="1.7" debug="true" includeantruntime="false" includes="**/*.java">
        		<classpath>
          			<pathelement location="${distdir}/${jar}"/>
                                <path refid="test.classpath"/>
        		</classpath>
		</javac>
	</target>

        <target name="copy-external">
	        <mkdir dir="lib" />
        	<!-- Copy external libraries to lib directory -->
	        <copy todir="lib">
		        <fileset dir="external" excludes="log4jME*.jar" />
		</copy>
	</target>

	<target name="javadoc" description="Create javadocs">
		<!-- Create the javadoc -->
		<mkdir dir="${javadoc}" />
    		<javadoc destdir="${javadoc}" access="public"
			 sourcepath="src/main/java" windowtitle="Constellation
								 Documentation"
			 packagenames="ibis.constellation,ibis.constellation.util" doctitle="Constellation Documentation" bottom="The Ibis project" classpathref="default.classpath">
		    <link href="http://docs.oracle.com/javase/6/docs/api/"/>
		</javadoc>

	</target>

	<target name="build" depends="clean,compile,copy-external">
	</target>

 	<target name="unittest" depends="unittest-compile">
                <jacoco:coverage destfile="${result.exec.file}">
    			<junit printsummary="on" haltonfailure="no" fork="true">
        			<classpath>
          				<path refid="test.classpath"/>
          				<pathelement location="${unittest.build.dir}"/>
        			</classpath>
        			<formatter type="brief" usefile="false" />
        			<batchtest>
            				<fileset dir="${unittest.src.dir}" includes="**/*Test.java" />
        			</batchtest>
    			</junit>
                </jacoco:coverage>
	</target>

 	<target name="integrationtest" depends="integrationtest-compile">
<!--	        <jacoco:coverage destfile="${result.exec.file}"> -->
    			<junit printsummary="on" haltonfailure="no" fork="true">
        			<classpath>
          				<path refid="test.classpath"/>
          				<pathelement location="${integrationtest.build.dir}"/>
        			</classpath>
        			<formatter type="brief" usefile="false" />
        			<batchtest>
            				<fileset dir="${integrationtest.src.dir}" includes="**/*Test.java" />
        			</batchtest>
    			</junit>
<!--                </jacoco:coverage> --> 
	</target>
	
 	<target name="report">
                <jacoco:report>

                        <!-- This task needs the collected execution data and ... -->
                        <executiondata>
                                <file file="${result.exec.file}" />
                        </executiondata>

                        <!-- the class files and optional source files ... -->
                        <structure name="Constellation Test Coverage">
                                <classfiles>
                                        <fileset dir="${main.build.dir}" />
                                </classfiles>
                                <sourcefiles encoding="UTF-8">
                                        <fileset dir="${main.src.dir}" />
                                </sourcefiles>
                        </structure>

                        <!-- to produce reports in different formats. -->
                        <html destdir="${result.report.dir}" />
                        <csv destfile="${result.report.dir}/report.csv" />
                        <xml destfile="${result.report.dir}/report.xml" />
                </jacoco:report>
        </target>

 	<target name="test" depends="unittest,integrationtest,report">
        </target>


	<target name="bin.zip" depends="build">
		<delete failonerror="false" file="${zip}" />

		<zip destfile="${zip}">
			<zipfileset dir="." prefix="constellation-${version}" includes="external/**,jars/**,*.properties,*.example,notices/**,README.txt,INSTALL.txt,LICENSE.txt,javadoc/**" />
			<zipfileset dir="." prefix="constellation-${version}" filemode="755" includes="bin/**" />
		</zip>
	</target>

	<target name="src.zip" depends="build">
		<delete failonerror="false" file="${src-zip}" />

		<zip destfile="${src-zip}">
			<zipfileset dir="." prefix="constellation-${version}" includes="src/**,external/**,jars/**,*.properties,*.example,notices/**,README.txt,INSTALL.txt,LICENSE.txt,javadoc/**,build.xml" />
			<zipfileset dir="." prefix="constellation-${version}" filemode="755" includes="bin/**" />
		</zip>
	</target>


	<!-- remove all generated code -->
	<target name="clean" description="Removes the ${distdir} directory">
		<delete failonerror="false" dir="${builddir}" />
		<delete failonerror="false" dir="${distdir}" />
		<delete failonerror="false" dir="${javadoc}" />
		<delete failonerror="false" dir="${result.dir}" />
	</target>

	<target name="distclean" depends="clean">
		<delete failonerror="false" dir="./build-eclipse" />
		<delete failonerror="false" file="${zip}" />
		<delete failonerror="false" file="${src-zip}" />
	</target>


</project>
